import numpy as np
import math

#Takes three frequencies in Hz, returns string of most-likely chord name
def Chord_Identification(f1, f2, f3):
   
    freqs = [f1, f2, f3] #Holds the three frequency values passed in
    Nnn = np.empty(3) #Holds the 'Normalized note number' (0-11) of each frequency 
    scores = np.empty(3) #Holds the score each frequency gets if assumed to be the root note
    
            #                   C     D     E  F     G     A      B
    Interval_Points = np.array([0, 0, 3, 5, 5, 3, 0, 7, 0, 1, 2,  1])   #Holds a score for any given interval. Can be tweaked as wanted        
            #                  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) 
            #                         2  m3 M3 4     5     6  b7  M7
    
    Chord_Names = [['C Major', 'C#/Db Major', 'D Major' , 'D#/Eb Major', 'E Major', 'F Major', 'F#/Gb Major', 'G Major', 'G#/Ab Major', 'A Major', 'A#/Bb Major', 'B Major'],
                   ['C Minor', 'C#/Db Minor', 'D Minor' , 'D#/Eb Minor', 'E Minor', 'F Minor', 'F#/Gb Minor', 'G Minor', 'G#/Ab Minor', 'A Minor', 'A#/Bb Minor', 'B Minor']]
    
    Note_Names = ['C', 'C#/Db', 'D', 'D#/Eb', 'E', 'F', 'F#/Gb', 'G', 'G#/Ab', 'A', 'A#/Bb', 'B']
    
    
    #Convert frequencies to their normalized note numbers
    for i in range (0, 3):
        Nnn[i] = (round(((math.log2((freqs[i])/440))*12) + 69))%12 
        
    #print(Note_Names[int(Nnn[0])], Note_Names[int(Nnn[1])], Note_Names[int(Nnn[2])])
    
    
    #Try each note as root note, determine a likelihood score for that configuration
    for i in range (0, 3):
        d1 = int(Nnn[(i+1)%3] - Nnn[i%3]) #find interval distance 1
        d2 = int(Nnn[(i+2)%3] - Nnn[i%3]) #find interval distance 2
        if (d1 < 0):  #correct d1 interval for direction
            d1 = d1 + 12
        if (d2 < 0):  #correct d2 interval for direction
            d2 = d2 + 12       
        scores[i] = Interval_Points[d1] + Interval_Points[d2] 
    
        
    #determine which root note got highest likelihood score
    max_score = 0
    max_score_idx = 0
    for i in range (0, 3):
        if (scores[i] > max_score):
            max_score_idx = i
            max_score = scores[i]
            
            
    #re-calculate intervals for the winning root noot
    d1 = int(Nnn[(max_score_idx+1)%3] - Nnn[max_score_idx%3]) #find interval distance 1
    d2 = int(Nnn[(max_score_idx+2)%3] - Nnn[max_score_idx%3]) #find interval distance 2 
    if (d1 < 0):  #correct d1 interval for direction
            d1 = d1 + 12
    if (d2 < 0):  #correct d2 interval for direction
            d2 = d2 + 12
 

    #check if major or minor, and select chord name
    if (d1 == 3 or d2 == 3):
        return (Chord_Names[1][int(Nnn[max_score_idx])]) # if a minor third is present, select minor chord
    else:
        return (Chord_Names[0][int(Nnn[max_score_idx])]) # else select major chord
    
