/ Calculate IPCP
    double f_ref = 130.81278265; // Define middle C (C3) as our reference freq.
    std::vector<double> ipcp(12, 0.0);

    for (int k = 1; k < size; k++) {
        // Find p(k)
        int p_k = static_cast<int>(std::round(12 * std::log2((k / static_cast<double>(size)) * (Fs / f_ref)))) % 12;
        // Add squared amplitude to corresponding bin
        ipcp[p_k] += spec_new[k] * spec_new[k];
    }

    // Square root, then normalize
    for (auto& value : ipcp) {
        value = std::sqrt(value);
    }
    double Z = *std::max_element(ipcp.begin(), ipcp.end());
    std::cout << "Improved Pitch Class Profile:\n";
    for (const auto& value : ipcp) {
        std::cout << value << " ";
    }
    std::cout << "\n\n";
    for (auto& value : ipcp) {
        value /= Z;
    }

    std::vector<int> notes(3);
    std::partial_sort_copy(ipcp.begin(), ipcp.end(), notes.begin(), notes.end(), std::greater<double>());

    std::vector<double> scores(3); // Holds the score each frequency gets if assumed to be the root note

    // Interval Points
    std::vector<int> Interval_Points = {0, 0, 3, 5, 5, 3, 0, 7, 0, 1, 2, 1}; // Holds a score for any given interval. Can be tweaked as wanted
    // Chord Names
    std::vector<std::vector<std::string>> Chord_Names = {
        {"C Major", "C#/Db Major", "D Major", "D#/Eb Major", "E Major", "F Major", "F#/Gb Major", "G Major", "G#/Ab Major", "A Major", "A#/Bb Major", "B Major"},
        {"C Minor", "C#/Db Minor", "D Minor", "D#/Eb Minor", "E Minor", "F Minor", "F#/Gb Minor", "G Minor", "G#/Ab Minor", "A Minor", "A#/Bb Minor", "B Minor"}
    };

    std::vector<std::string> Note_Names = {"C", "C#/Db", "D", "D#/Eb", "E", "F", "F#/Gb", "G", "G#/Ab", "A", "A#/Bb", "B"};

    std::cout << "Notes present: " << Note_Names[notes[0]] << ", " << Note_Names[notes[1]] << ", " << Note_Names[notes[2]] << "\n\n";

    // Try each note as root note, determine a likelihood score for that configuration
    for (int i = 0; i < 3; i++) {
        int d1 = notes[(i + 1) % 3] - notes[i % 3]; // find interval distance 1
        int d2 = notes[(i + 2) % 3] - notes[i % 3]; // find interval distance 2
        if (d1 < 0) { // correct d1 interval for direction
            d1 += 12;
        }
        if (d2 < 0) { // correct d2 interval for direction
            d2 += 12;
        }
        scores[i] = Interval_Points[d1] + Interval_Points[d2];
    }

    // Determine which root note got highest likelihood score
    double max_score = 0;
    int max_score_idx = 0;
    for (int i = 0; i < 3; i++) {
        if (scores[i] > max_score) {
            max_score_idx = i;
            max_score = scores[i];
        }
    }

    // Re-calculate intervals for the winning root note
    int d1 = notes[(max_score_idx + 1) % 3] - notes[max_score_idx % 3]; // find interval distance 1
    int d2 = notes[(max_score_idx + 2) % 3] - notes[max_score_idx % 3]; // find interval distance 2 
    if (d1 < 0) { // correct d1 interval for direction
        d1 += 12;
    }
    if (d2 < 0) { // correct d2 interval for direction
        d2 += 12;
    }

    // Check if major or minor, and select chord name
    if (d1 == 3 || d2 == 3) {
        std::cout << "Chord identified: " << Chord_Names[1][notes[max_score_idx]]; // if a minor third is present, select minor chord
    } else {
        std::cout << "Chord identified: " << Chord_Names[0][notes[max_score_idx]]; // else select major chord.
    }

    return 0;
}
